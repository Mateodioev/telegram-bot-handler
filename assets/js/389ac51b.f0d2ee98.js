"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1153],{7466:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/filters","title":"Filters","description":"Filter are similar to middlewares but with the difference that only has access to the context an no the api.","source":"@site/docs/guides/filters.md","sourceDirName":"guides","slug":"/guides/filters","permalink":"/telegram-bot-handler/docs/guides/filters","draft":false,"unlisted":false,"editUrl":"https://github.com/Mateodioev/telegram-bot-handler/tree/v5/docs/guides/filters.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Middlewares","permalink":"/telegram-bot-handler/docs/guides/middlewares"},"next":{"title":"Buttons","permalink":"/telegram-bot-handler/docs/guides/buttons"}}');var s=n(4848),r=n(8453);const a={sidebar_position:5},l="Filters",d={},c=[{value:"Understanding the return value",id:"understanding-the-return-value",level:2}];function o(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"filters",children:"Filters"})}),"\n",(0,s.jsxs)(t.p,{children:["Filter are similar to ",(0,s.jsx)(t.a,{href:"./middlewares",children:"middlewares"})," but with the difference that only has access to the context an no the api.\nIt is intended to perform lighter validations, such as verifying the type of chat, verifying if a message contains multimedia, etc."]}),"\n",(0,s.jsx)(t.h1,{id:"adding-a-filter-to-an-event",children:"Adding a filter to an event"}),"\n",(0,s.jsxs)(t.p,{children:["Filters are treated like ",(0,s.jsx)(t.a,{href:"https://www.php.net/manual/en/language.attributes.overview.php",children:"Attributes"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="start.php"',children:"use Mateodioev\\TgHandler\\Filters\\FilterPrivateChat;\n\n#[FilterPrivateChat]\nclass Start extends MessageCommand {\n    ///\n}\n"})}),"\n",(0,s.jsx)(t.h1,{id:"pre-defined-filters",children:"Pre defined filters"}),"\n",(0,s.jsx)(t.p,{children:"Import all the filters:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Filters\\{\n    FilterChatType,\n    FilterFromUserId,\n    FilterIgnore,\n    FilterMessageChat,\n    FilterMessageMedia,\n    MediaType,\n    FilterMessageMediaSticker,\n    FilterPrivateChat,\n    FilterNot,\n    FilterOr,\n    FilterXor,\n    FilterCollection\n};\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterChatType"}),": Validate that the update is from a specific ",(0,s.jsx)(t.a,{href:"https://core.telegram.org/bots/api#chat",children:"chat type"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"#[FilterChatType(chatType: 'private')]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterFromUserId"}),": Validate that the update is coming from a specific user","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"#[FilterFromUserId(userId: 'MY PERSONAL ID')]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterIgnore"}),": Always return false"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterMessageChat"}),": Validate that the update is coming from a specific chat","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"#[FilterMessageChat(chatId: 'MY CHAT ID')]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterMessageMedia"}),": Validate that the event is a message and validate the it has the specified media type.","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"#[FilterMessageMedia(mediaType: MediaType::video)]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterMessageMediaSticker"}),": Validate that the event contain a sticker.","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"#[FilterMessageMediaSticker]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterPrivateChat"}),": Validate that the update is coming from a private chat (e.g: User talks to the bot)\n#[FilterPrivateChat]"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterNot"}),": Negate the filter","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"// The event works in any type of chat, except private chats\n#[FilterNot(new FilterPrivateChat)]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterOr"}),": Return ",(0,s.jsx)(t.code,{children:"true"})," is either $a or $b is ",(0,s.jsx)(t.code,{children:"true"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"// Works with audio or voice\n#[FilterOr(a: new FilterMessageMedia(MediaType::audio), b: FilterMessageMedia(MediaType::voice))]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterXor"}),": Return ",(0,s.jsx)(t.code,{children:"true"})," if either $a or $b is `true, but not both","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"// Works with document or photo, but not both\n#[FilterXor(a: new FilterMessageMedia(MediaType::document), b: FilterMessageMedia(MediaType::photo))]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FilterCollection"}),": Groups multiple filters"]}),"\n"]}),"\n",(0,s.jsx)(t.h1,{id:"using-multiple-filters",children:"Using multiple filters"}),"\n",(0,s.jsxs)(t.p,{children:["You can use ",(0,s.jsx)(t.code,{children:"FilterCollection"})," or you just use the ",(0,s.jsx)(t.a,{href:"https://www.php.net/manual/en/language.attributes.overview.php",children:"Attributes syntax"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Events\\Types\\MessageEvent;\n\n#[FilterPrivateChat]\n#[FilterMessageRegex('/.*(filters).*/i')]\nclass MyEvent extends MessageEvent {\n    //\n}\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Now this only works with private chats ",(0,s.jsx)(t.strong,{children:"and"})," texts containing the work ",(0,s.jsx)(t.code,{children:"filters"})]}),"\n"]}),"\n",(0,s.jsx)(t.h1,{id:"on-invalid-filters",children:"On invalid filters"}),"\n",(0,s.jsxs)(t.p,{children:["If you want to make some action when any of the filters can be validate you can implement the method ",(0,s.jsx)(t.code,{children:"onInvalidFilters"})," in your ",(0,s.jsx)(t.a,{href:"./commands/intro",children:"command"})]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Note: I'm working on move this to the event interface"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Commands\\MessageCommand;\n\n#[FilterPrivateChat]\nclass MyEvent extends MessageCommand {\n    public function execute(array $args = [])\n    {\n        // Your logic here\n    }\n\n    public function onInvalidFilters(): ?bool\n    {\n        $id = $this->ctx()->getUserId();\n\n        // fake method to check if this user can use private commands\n        if (isAllowed($id)) {\n            return true;\n        } else {\n            $this->api()->sendMessage($this->ctx()->getChatId(), 'Only execute this command in a private chat');\n            return false;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"understanding-the-return-value",children:"Understanding the return value"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"true"}),": Continue with the ",(0,s.jsx)(t.code,{children:"execute"})," method"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"false"}),": Terminate the execution of the event"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"null"}),": Like false, but the command is treated as not execute"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(6540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);