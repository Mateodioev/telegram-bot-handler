"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5680],{5214:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"guides/logger","title":"Logger","description":"You can use any implementation of PSR-3 logger. This library provides a especial logger called \\\\Mateodioev\\\\TgHandler\\\\Log\\\\Logger","source":"@site/docs/guides/logger.md","sourceDirName":"guides","slug":"/guides/logger","permalink":"/telegram-bot-handler/docs/guides/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/Mateodioev/telegram-bot-handler/tree/v5/docs/guides/logger.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Context","permalink":"/telegram-bot-handler/docs/guides/context"},"next":{"title":"Middlewares","permalink":"/telegram-bot-handler/docs/guides/middlewares"}}');var s=r(4848),t=r(8453);const l={sidebar_position:3},i="Logger",o={},d=[{value:"Writing logs",id:"writing-logs",level:2},{value:"Stream",id:"stream",level:2},{value:"Bulk stream",id:"bulk-stream",level:3},{value:"BotApiStream",id:"botapistream",level:3},{value:"FileStream",id:"filestream",level:3},{value:"PhpNativeStream",id:"phpnativestream",level:3},{value:"TerminalStream",id:"terminalstream",level:3},{value:"ResourceStream",id:"resourcestream",level:3},{value:"Creating your own stream",id:"creating-your-own-stream",level:3},{value:"Level",id:"level",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"logger",children:"Logger"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use any implementation of ",(0,s.jsx)(n.a,{href:"https://www.php-fig.org/psr/psr-3/",children:"PSR-3 logger"}),". This library provides a especial logger called ",(0,s.jsx)(n.code,{children:"\\Mateodioev\\TgHandler\\Log\\Logger"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Log\\Logger;\n\n$logger = new Logger($myStream);\n// $myStream is an instance of Stream\n\n// Adding to the bot\n$bot = new Bot('TOKEN', $logger);\n// or with a bot already created\n$bot->setLogger($logger);\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"../getting-started/creating-basic-bot",children:"Creating a new bot"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"writing-logs",children:"Writing logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$logger->debug('This is a log message');\n// output: [Y-m-d H:i:s] [DEBUG] This is a debug message\n"})}),"\n",(0,s.jsx)(n.p,{children:"Adding context"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$logger->info('This is a debug message with {paramName}', [\n    'paramName' => 'context params'\n    // note: sending \"exception\" key is treated different an will produce a different output\n    'exception' => $e, // Throwable instance\n]);\n// output: [Y-m-d H:i:s] [INFO] This is a debug message with context params\n"})}),"\n",(0,s.jsx)(n.h2,{id:"stream",children:"Stream"}),"\n",(0,s.jsx)(n.p,{children:"This is a resource where the logger will send the generated message"}),"\n",(0,s.jsx)(n.h3,{id:"bulk-stream",children:"Bulk stream"}),"\n",(0,s.jsxs)(n.p,{children:["By default the logger instance only accepts one stream, to avoid this you can use the ",(0,s.jsx)(n.code,{children:"Mateodioev\\TgHandler\\Log\\BulkStream"})," and set all the streams you want to use"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$stream = new \\Mateodioev\\TgHandler\\Log\\BulkStream($stream1, $stream2, $stream3);\n// Add more streams\n$stream->add($anotherStream)->add($anotherAnotherStream);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"botapistream",children:"BotApiStream"}),"\n",(0,s.jsx)(n.p,{children:"This is a special stream the send the logs to a telegram chat."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\Bots\\Telegram\\Api;\nuse Mateodioev\\TgHandler\\Log\\BotApiStream;\n\n$botStream = new BotApiStream($apiInstance, 'CHAT ID/USERNAME');\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example with a bot instance already created"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$botStream = new BotApiStream($bot->getApi(), 'CHAT ID/USERNAME');\n$bot->setLogger(new Logger($botStream));\n"})}),"\n",(0,s.jsx)(n.p,{children:"Also you can set custom log levels to this stream (not affect the logger level). By default only critical, error and emergency levels are enable."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$botStream->setLevel(Logger::DEBUG); // Add debug level\n"})}),"\n",(0,s.jsx)(n.h3,{id:"filestream",children:"FileStream"}),"\n",(0,s.jsx)(n.p,{children:"Write logs to a file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$stream = new \\Mateodioev\\TgHandler\\Log\\FileStream($fileName);\n// Also you can generate a file with the current date\n$stream = \\Mateodioev\\TgHandler\\Log\\FileStream::fromToday($directory);\n// Create a file like: /path/.../2024-01-01-php_error.log\n"})}),"\n",(0,s.jsx)(n.h3,{id:"phpnativestream",children:"PhpNativeStream"}),"\n",(0,s.jsxs)(n.p,{children:["Send all the errors to a file, also catch ",(0,s.jsx)(n.a,{href:"https://www.php.net/manual/en/function.set-error-handler.php",children:"php errors"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$stream = new \\Mateodioev\\TgHandler\\Log\\PhpNativeStream();\n$stream->activate('directory to save the file', 'file or null to generate one');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"terminalstream",children:"TerminalStream"}),"\n",(0,s.jsx)(n.p,{children:"Output a log message to the terminal"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$stream = new \\Mateodioev\\TgHandler\\Log\\TerminalStream();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"resourcestream",children:"ResourceStream"}),"\n",(0,s.jsxs)(n.p,{children:["Send log messages to a ",(0,s.jsx)(n.a,{href:"https://www.php.net/manual/en/language.types.resource.php",children:"php resource"}),"\n. Used by ",(0,s.jsx)(n.code,{children:"TerminalStream"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$stream = new \\Mateodioev\\TgHandler\\Log\\ResourceStream(STDOUT);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-your-own-stream",children:"Creating your own stream"}),"\n",(0,s.jsx)(n.p,{children:"Create a new class an extend the Stream interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Log\\Stream;\nuse SimpleLogger\\streams\\LogResult;\n\nclass MyCustomStream extends Stream\n{\n    public function push(LogResult $message, ?string $level): void\n    {\n        // Do whatever you want with the message\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"LogResult"}),"\nIs a object the contain the information about the current log message, properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"level: Level of the message, as a string"}),"\n",(0,s.jsx)(n.li,{children:"message: The message set by the user"}),"\n",(0,s.jsxs)(n.li,{children:["exception: ",(0,s.jsx)(n.code,{children:"\\Throwable"})," instance. optional"]}),"\n",(0,s.jsx)(n.li,{children:"timestamp: unix-time when the message was generated"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"level",children:"Level"}),"\n",(0,s.jsxs)(n.p,{children:["You can enable or disable certain log levels with the method ",(0,s.jsx)(n.code,{children:"setLevel"}),", also you can use ",(0,s.jsx)(n.a,{href:"https://www.php.net/manual/en/language.operators.bitwise.php",children:"bitwise flags"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$logger->setLevel(Logger::ALL); // Enable all the level. default\n$logger->setLevel(~Logger::DEBUG | ~Logger::WARNING); // Disable debug and warning messages\n$logger->setLevel(Logger::ALL, add: false); // Disable all the levels, you need to use this first before use certain log level\n// Only enable certain levels\n$logger->setLevel(Logger::DEBUG | Logger::NOTICE | Logger::CRITICAL | Logger::ERROR | Logger::EMERGENCY);\n"})}),"\n",(0,s.jsx)(n.p,{children:"List of available levels:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::ALl"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::CRITICAL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::ERROR"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::EMERGENCY"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::ALERT"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::WARNING"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::NOTICE"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::INFO"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Logger::DEBUG"})}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"how-to-access-the-logger",children:"How to access the logger"}),"\n",(0,s.jsx)(n.p,{children:"Logger is available in this context:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./events#creating-a-new-event",children:"event execute"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./context",children:"context"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Example inside a middleware\n$ctx->logger->debug('123');\n"})}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var a=r(6540);const s={},t=a.createContext(s);function l(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);