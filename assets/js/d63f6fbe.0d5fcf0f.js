"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9085],{2618:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/events","title":"Events","description":"When telegram send any type of update, this library converts it to an instance of the Update object, an to listen to it you need to create a event of the update type","source":"@site/docs/guides/events.md","sourceDirName":"guides","slug":"/guides/events","permalink":"/telegram-bot-handler/docs/guides/events","draft":false,"unlisted":false,"editUrl":"https://github.com/Mateodioev/telegram-bot-handler/tree/v5/docs/guides/events.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/telegram-bot-handler/docs/category/guides"},"next":{"title":"Context","permalink":"/telegram-bot-handler/docs/guides/context"}}');var o=t(4848),i=t(8453);const r={sidebar_position:1},c="Events",d={},l=[{value:"Event types",id:"event-types",level:2},{value:"Adding the event to the bot",id:"adding-the-event-to-the-bot",level:2}];function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,o.jsxs)(n.p,{children:["When telegram send any type of ",(0,o.jsx)(n.a,{href:"https://core.telegram.org/bots/api#update",children:"update"}),", this library converts it to an instance of the ",(0,o.jsx)(n.a,{href:"https://github.com/Mateodioev/telegram-bot-api/blob/v4/src/Types/Update.php",children:"Update"})," object, an to listen to it you need to create a event of the update type"]}),"\n",(0,o.jsx)(n.h2,{id:"event-types",children:"Event types"}),"\n",(0,o.jsxs)(n.p,{children:["All the current types of supported events is defined in the enum ",(0,o.jsx)(n.a,{href:"https://github.com/Mateodioev/telegram-bot-handler/blob/v5/src/Events/EventType.php",children:(0,o.jsx)(n.code,{children:"Mateodioev\\TgHandler\\Events\\EventType"})}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EventType::message"})," Message sent by a user"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EventType::callback_query"})," User press a inline button"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::edited_message"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::channel_post"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::edited_channel_post"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::inline_query"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::chosen_inline_result"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::shipping_query"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::poll"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::poll_answer"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::my_chat_member"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"EventType::chat_join_request"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EventType::none"})," Just for ignore an event"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EventType::all"})," Special type to listen any type of update"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["To see the description of every type go to ",(0,o.jsx)(n.a,{href:"https://core.telegram.org/bots/api#update",children:"telegram documentation"})]}),"\n"]}),"\n",(0,o.jsx)(n.h1,{id:"creating-a-new-event",children:"Creating a new event"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Events\\{EventType, abstractEvent};\n// Event to hear any text message sent by a user, channel, etc\nclass MyEvent extends abstractEvent\n{\n    public EventType $type = EventType::message;\n\n    public function execute(array $args = [])\n    {\n        // Event logic here\n        $this->api()->sendMessage(\n            chatID: 'YOUR TARGET ID',\n            text: 'Hello',\n        );\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this event we set the property ",(0,o.jsx)(n.code,{children:"$type"})," to a specific event type. To listen more events just create another event and add it to the bot."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["To access to the Update information see ",(0,o.jsx)(n.a,{href:"./context",children:"Context"})," object"]}),"\n"]}),"\n",(0,o.jsx)(n.h1,{id:"all-event",children:"All event"}),"\n",(0,o.jsx)(n.p,{children:"This is a special event that serves to listen to any type of event."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Events\\Types\\AllEvent;\nclass GlobalListener extends AllEvent\n{\n    public function execute(array $args = [])\n    {\n        $type = $this->ctx()->eventType()->prettyName();\n        $raw = json_encode($this->ctx()->getReduced(), JSON_PRETTY_PRINT) . PHP_EOL;\n        echo $raw;\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"adding-the-event-to-the-bot",children:"Adding the event to the bot"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"$bot->onEvent(new MyEventName());\n"})}),"\n",(0,o.jsx)(n.h1,{id:"stopping-the-execution-of-the-event",children:"Stopping the execution of the event"}),"\n",(0,o.jsxs)(n.p,{children:["Throw the special ",(0,o.jsx)(n.code,{children:"StopCommand"})," exception"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Commands\\StopCommand;\n\npublic function execute(array $args = [])\n{\n    throw new StopCommand();\n}\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Note",type:"tip",children:[(0,o.jsx)(n.p,{children:"If you set a message, the bot will try to send the same message to the user"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"throw new StopCommand('You can\\'t use this command');\n"})}),(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Use html format."}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);