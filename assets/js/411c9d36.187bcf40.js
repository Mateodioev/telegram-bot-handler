"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7698],{8099:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/commands/text","title":"Text","description":"Text commands only respond to text messages send by a users","source":"@site/docs/guides/commands/text.md","sourceDirName":"guides/commands","slug":"/guides/commands/text","permalink":"/telegram-bot-handler/docs/guides/commands/text","draft":false,"unlisted":false,"editUrl":"https://github.com/Mateodioev/telegram-bot-handler/tree/v5/docs/guides/commands/text.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/telegram-bot-handler/docs/guides/commands/intro"},"next":{"title":"Callback","permalink":"/telegram-bot-handler/docs/guides/commands/callback"}}');var i=t(4848),d=t(8453);const r={sidebar_position:2},o="Text",a={},c=[{value:"The <code>execute</code> method",id:"the-execute-method",level:2},{value:"onEvent",id:"onevent",level:2},{value:"registerCommand",id:"registercommand",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"text",children:"Text"})}),"\n",(0,i.jsx)(n.p,{children:"Text commands only respond to text messages send by a users"}),"\n",(0,i.jsx)(n.h1,{id:"basic-usage",children:"Basic usage"}),"\n",(0,i.jsxs)(n.p,{children:["Start creating a class the extend the ",(0,i.jsx)(n.code,{children:"MessageCommand"})," interface"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Commands\\MessageCommand;\n\nclass Start extends MessageCommand {\n    protected string $name = 'start';\n\n    // Optional properties\n    protected string $description = 'This is the start command';\n    protected array $prefix = ['/', '!', '.'];\n    protected array $alias = ['help'];\n\n    public function execute(array $args = []) {\n        // Here goes the logic of the command\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$prefix"}),": By the default the ",(0,i.jsx)(n.code,{children:"MessageCommand"})," only works with the prefix ",(0,i.jsx)(n.code,{children:"/"}),", you can set here an array with additional prefixes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$alias"}),": To call the command with other names"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Now this command only is executed when the user send a message like ",(0,i.jsx)(n.code,{children:"/start"})," to the bot"]}),"\n",(0,i.jsxs)(n.h2,{id:"the-execute-method",children:["The ",(0,i.jsx)(n.code,{children:"execute"})," method"]}),"\n",(0,i.jsxs)(n.p,{children:["This method contains all the logic of your command and only if execute when the given text match the ",(0,i.jsx)(n.code,{children:"$name"})]}),"\n",(0,i.jsx)(n.h1,{id:"registering-the-command",children:"Registering the command"}),"\n",(0,i.jsx)(n.p,{children:"There are two ways to register a command in the bot"}),"\n",(0,i.jsx)(n.h2,{id:"onevent",children:"onEvent"}),"\n",(0,i.jsx)(n.p,{children:"This is the default way an not provide any type of advantage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="index.php"',children:"$bot->onEvent(new Start());\n"})}),"\n",(0,i.jsx)(n.h2,{id:"registercommand",children:"registerCommand"}),"\n",(0,i.jsxs)(n.p,{children:["This method allows you to use ",(0,i.jsx)(n.a,{href:"generic",children:"GenericCommands"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="index.php"',children:"$bot->registerCommand(new Start());\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Note",type:"warning",children:[(0,i.jsx)(n.p,{children:"All other commands will be registered with the add method."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="index.php"',children:"$bot->registerCommand(new Start())\n    ->add(new Register())\n    ->add(new User());\n"})})]}),"\n",(0,i.jsx)(n.h1,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$this->api()"}),": Instance of ",(0,i.jsx)(n.a,{href:"https://github.com/Mateodioev/telegram-bot-api/tree/v4",children:"Telegram bot api"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$this->ctx()"}),": Object containing all the information of the ",(0,i.jsx)(n.a,{href:"/telegram-bot-handler/docs/guides/events",children:"event"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$this->ctx()->getPayload(): string"}),": The the text after the command, e.g: ",(0,i.jsx)(n.code,{children:"/start hello my name is ..."})," -> ",(0,i.jsx)(n.code,{children:"hello my name is ..."})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);