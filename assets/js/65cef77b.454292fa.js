"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6346],{3154:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"guides/middlewares","title":"Middlewares","description":"Middleware is executed before an event, and the result will send to the same event","source":"@site/docs/guides/middlewares.md","sourceDirName":"guides","slug":"/guides/middlewares","permalink":"/telegram-bot-handler/docs/guides/middlewares","draft":false,"unlisted":false,"editUrl":"https://github.com/Mateodioev/telegram-bot-handler/tree/v5/docs/guides/middlewares.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Logger","permalink":"/telegram-bot-handler/docs/guides/logger"},"next":{"title":"Filters","permalink":"/telegram-bot-handler/docs/guides/filters"}}');var a=t(4848),r=t(8453);const d={sidebar_position:4},i="Middlewares",l={},o=[];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"middlewares",children:"Middlewares"})}),"\n",(0,a.jsx)(n.p,{children:"Middleware is executed before an event, and the result will send to the same event"}),"\n",(0,a.jsx)(n.h1,{id:"registering-a-middleware",children:"Registering a middleware"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Mateodioev\\TgHandler\\Events\\{EventType, abstractEvent};\nclass MyEvent extends abstractEvent\n{\n    public EventType $type = EventType::message;\n    protected array $middlewares = [\n        MyMiddlewareClass::class,\n    ];\n\n    public function execute(array $args = [])\n    {\n        // $args contain the result of all the middleware\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Also you can use the methods ",(0,a.jsx)(n.code,{children:"addMiddleware"}),", ",(0,a.jsx)(n.code,{children:"setMiddlewares"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$event->addMiddleware(new MyMiddlewareClass()); // Add a single middleware\n$event->setMiddlewares($myMiddlewareArray); // Register multiple middlewares\n"})}),"\n",(0,a.jsx)(n.h1,{id:"creating-a-new-middleware",children:"Creating a new middleware"}),"\n",(0,a.jsxs)(n.p,{children:["You need to extend the ",(0,a.jsx)(n.code,{children:"Middleware"})," class"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",metastring:'title="antispam.php"',children:"use Mateodioev\\Bots\\Telegram\\Api;\nuse Mateodioev\\TgHandler\\Context;\nuse Mateodioev\\TgHandler\\Middleware\\Middleware;\n\nclass AntiSpam extends Middleware\n{\n    public function __construct(\n        private readonly int $maxMessages = 1,\n        private readonly int $time = 60,\n    ) {\n    }\n\n    public function __invoke(Context $ctx, Api $api, array $args = []): User\n    {\n        // $args contain the result of previously executed middlewares\n        $user = Database::findUser($this->ctx()->getUserId());\n\n        if ($user->throwAntispam($this->maxMessages, $this->time)) {\n            // Stop the event execution\n            throw new StopCommand('Please wait.');\n        }\n\n        return $user;\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Note: The methods used here are fictitious"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Add to the event"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"class MyEvent extends abstractEvent\n{\n    protected array $middlewares = [\n        AntiSpam::class,\n    ];\n}\n"})}),"\n",(0,a.jsx)(n.h1,{id:"acceding-to-the-results-of-the-middleware",children:"Acceding to the results of the middleware"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"$args"})," contain the result of all the middlewares, if a middleware return nothing or null it wil not be registered."]}),"\n",(0,a.jsx)(n.p,{children:"Inside an event"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",metastring:'title="start.php"',children:"protected array $middlewares = [\n    AntiSpam::class . ':4,60', // Max 4 messages every minute\n];\n\npublic function execute(array $args = [])\n{\n    $user = $args[AntiSpam::class];\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inside another middleware"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function __invoke(Context $ctx, Api $api, array $args = [])\n{\n    $args[AnotherMiddleware::class];\n}\n"})}),"\n",(0,a.jsx)(n.h1,{id:"creating-a-middleware-with-custom-values",children:"Creating a middleware with custom values"}),"\n",(0,a.jsx)(n.p,{children:"If you middleware has a constructor an need some values you can use this syntax when registering the middleware on the event"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:'protected array $middlewares = [\n    AntiSpam::class . \':4,60\',\n    // Add an initial colon ":"\n    // Every parameter need to be separated by a coma ","\n];\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var s=t(6540);const a={},r=s.createContext(a);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);